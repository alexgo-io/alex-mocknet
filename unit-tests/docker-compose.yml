version: "3.7"
services:
  postgres:
    image: "postgres:12.2"
    ports:
      - "5439:5432"
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: stacks_blockchain_api
      POSTGRES_PORT: 5432
    volumes:
      - "./stacks-blockchain-api/postgres:/var/lib/postgresql/data"
    networks:
      - backend

  stacks-blockchain:
    build:
      context: "./stacks-blockchain/docker"
      dockerfile: Dockerfile
    restart: on-failure
    environment:
      WAIT_BEFORE: 3
      WAIT_AFTER: 3
      WAIT_HOSTS: "stacks-blockchain-api:3700"
      NOP_BLOCKSTACK_DEBUG: 1
      STACKS_EVENT_OBSERVER: stacks-blockchain-api:3700
      XBLOCKSTACK_DEBUG: 1
      RUST_BACKTRACE: 1
      STACKS_CHAIN_ID: "0x80000000"
      PG_HOST: postgres
      PG_PORT: 5432
      PG_USER: postgres
      PG_PASSWORD: postgres
      PG_DATABASE: postgres
      V2_POX_MIN_AMOUNT_USTX: 90000000260
      STACKS_CORE_RPC_HOST: stacks-blockchain
      STACKS_CORE_RPC_PORT: 20443
      STACKS_API_ENABLE_FT_METADATA: 1
      STACKS_API_ENABLE_NFT_METADATA: 1
    ports:
      - "20443:20443"
      - "20444:20444"
    volumes:
      - ./stacks-blockchain/config:/app/config
      - ./stacks-blockchain/data:/root/stacks-node/data
    networks:
      - backend

  stacks-blockchain-api:
    build:
      context: "./stacks-blockchain-api/docker"
      dockerfile: Dockerfile
    restart: on-failure
    networks:
      - backend
    environment:
      WAIT_HOSTS: "postgres:5432"
      PG_HOST: postgres
      PG_PORT: 5432
      PG_USER: postgres
      PG_PASSWORD: postgres
      PG_DATABASE: stacks_blockchain_api
      STACKS_CORE_EVENT_PORT: "3700"
      STACKS_CORE_EVENT_HOST: http://0.0.0.0
      STACKS_BLOCKCHAIN_API_PORT: "3999"
      STACKS_BLOCKCHAIN_API_HOST: 0.0.0.0
      STACKS_BLOCKCHAIN_API_DB: pg
      STACKS_CORE_RPC_HOST: stacks-blockchain
      STACKS_CORE_RPC_PORT: "20443"
      STACKS_CHAIN_ID: "0x80000000"
      NODE_ENV: development
    ports:
      - "3999:3999"
      - "9153:9153"
networks:
  backend:
